/*
    @file memory.h
    @brief Кросс-платформенный интерфейс для управления памятью.
    @author Дмитрий Скляр.
    @version 1.0
    @date 23-08-2025

    @license Лицензия Apache, версия 2.0 («Лицензия»);
          Вы не имеете права использовать этот файл без соблюдения условий Лицензии.
          Копию Лицензии можно получить по адресу http://www.apache.org/licenses/LICENSE-2.0
          Если иное не предусмотрено действующим законодательством или не согласовано в письменной форме,
          программное обеспечение, распространяемое по Лицензии, распространяется на условиях «КАК ЕСТЬ»,
          БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых. См. Лицензию для получения
          информации о конкретных языках, регулирующих разрешения и ограничения по Лицензии.

    @note Реализации функций являются платформозависимыми и находятся в соответствующих
          platform/ модулях (windows, linux и т.д.).

    @note Для корректной работы необходимо предварительно инициализировать (в указанном порядке):
            - Подсистему консоли platform_console_initialize()
            - Подсистему памяти platform_memory_initialize()
*/

#pragma once

#include <core/defines.h>

/*
    @brief Инициализирует подсистему для работы с памятью.
    @note Должна быть вызвана один раз при старте приложения, перед использованием любых других функций работы с памятью.
    @warning Не thread-safe. Должна вызываться из основного потока.
    @return true - инициализация успешна, false - произошла ошибка.
*/
API bool platform_memory_initialize();

/*
    @brief Завершает работу подсистемы для работы с памятью.
    @note Должна быть вызвана при завершении приложения.
    @warning Не thread-safe. Должна вызываться из основного потока.
*/
API void platform_memory_shutdown();

/*
    @brief Проверяет, была ли инициализирована подсистема для работы с памятью.
    @note Может использоваться для проверки состояния подсистемы перед вызовом других функций.
    @warning Не thread-safe. Должна вызываться из того же потока, что и инициализация/завершение.
    @return true - подсистема инициализирована и готова к работе, false - подсистема не инициализирована.
*/
API bool platform_memory_is_initialized();

/*
    @brief Запрашивает у системы блок памяти заданного размера.
    @note Выделенная память не инициализирована (может содержать мусор).
    @warning Не thread-safe. Клиентский код должен обеспечить синхронизацию при использовании из нескольких потоков.
    @param size Размер выделяемого блока памяти в байтах.
    @return Указатель на выделенный блок памяти или nullptr при ошибке.
*/
API void* platform_memory_allocate(u64 size);

/*
    @brief Освобождает ранее выделенный блок памяти.
    @note Использование указателя после освобождения приведет к неопределенному поведению!
    @warning Не thread-safe. Клиентский код должен обеспечить синхронизацию при использовании из нескольких потоков.
    @param block Указатель на блок памяти для освобождения.
*/
API void platform_memory_free(void* block);

/*
    @brief Заполняет блок памяти нулевыми байтами.
    @warning Не thread-safe. Клиентский код должен обеспечить синхронизацию при использовании из нескольких потоков.
    @param block Указатель на блок памяти.
    @param size Размер блока памяти в байтах.
*/
API void platform_memory_zero(void* block, u64 size);

/*
    @brief Заполняет блок памяти указанным значением.
    @warning Не thread-safe. Клиентский код должен обеспечить синхронизацию при использовании из нескольких потоков.
    @param block Указатель на блок памяти.
    @param size Размер блока памяти в байтах.
    @param value Значение для заполнения (диапазон 0-255).
*/
API void platform_memory_set(void* block, u64 size, u8 value);

/*
    @brief Копирует данные из одного блока памяти в другой.
    @note Поведение не определено при перекрытии регионов памяти.
    @warning Не thread-safe. Клиентский код должен обеспечить синхронизацию при использовании из нескольких потоков.
    @param dst Указатель на блок памяти назначения.
    @param src Указатель на блок памяти источника.
    @param size Количество байтов для копирования.
*/
API void platform_memory_copy(void* dst, const void* src, u64 size);

/*
    @brief Копирует данные из одного блока памяти в другой с обработкой перекрытия регионов.
    @note Безопасно обрабатывает перекрывающиеся регионы памяти.
    @warning Не thread-safe. Клиентский код должен обеспечить синхронизацию при использовании из нескольких потоков.
    @param dst Указатель на блок памяти назначения.
    @param src Указатель на блок памяти источника.
    @param size Количество байтов для копирования.
*/
API void platform_memory_move(void* dst, const void* src, u64 size);
