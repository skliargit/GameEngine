#pragma once

#include <core/defines.h>
#include <platform/string.h>

/*
    @brief Получает количество символов в строке (без учета завершающего нуль-символа).
    @note Поддерживаются строки в кодировках ANSI/ASCII. Для UTF-8 используйте специальные функции.
    @param str Указатель на нуль-терминированную строку.
    @return Количество символов в строке.
*/
#define string_length(str) platform_string_length(str)

/*
    @brief Форматирует строку с использованием указателя на списк аргументов переменной длины.
    @note Для безопасного использования убедитесь, что dst достаточно велик для хранения результата.
    @param dst Буфер для записи результата. Может быть nullptr только если length == 0.
    @param length Размер буфера dst, включая место для завершающего нуль-символа.
           Если 0 - функция возвращает необходимую длину без записи в буфер.
    @param format Строка формата в стиле printf. Не может быть nullptr.
    @param args Указатель на список аргументов переменной длины (va_list).
    @return Количество записанных символов (без учета завершающего нуль-символа) 
            или необходимый размер буфера при length == 0.
            Возвращает -1 в случае ошибки форматирования.
*/
#define string_format_va(dst, length, format, args) platform_string_format_va(dst, length, format, args)

/*
    @brief Форматирует строку с использованием списка аргументов переменной длины.
    @note Для безопасного использования убедитесь, что dst достаточно велик для хранения результата.
    @param dst Буфер для записи результата. Может быть nullptr только если length == 0.
    @param length Размер буфера dst, включая место для завершающего нуль-символа.
           Если 0 - функция возвращает необходимую длину без записи в буфер.
    @param format Строка формата в стиле printf. Не может быть nullptr.
    @param ... Аргументы для подстановки в строку формата.
    @return Количество записанных символов (без учета завершающего нуль-символа) 
            или необходимый размер буфера при length == 0.
            Возвращает -1 в случае ошибки форматирования.
*/
#define string_format(dst, length, format, args...) platform_string_format(dst, length, format, ##args)

/*
    @brief Сравнивает две нуль-терминированные строки с учетом регистра.
    @note Сравнение чувствительно к регистру.
    @param lstr Указатель на первую строку (должна быть валидной).
    @param rstr Указатель на вторую строку (должна быть валидной).
    @return true если строки идентичны, false если различны или переданы nullptr указатели.
*/
#define string_equal(lstr, rstr) platform_string_equal(lstr, rstr)

/*
    @brief Сравнивает две нуль-терминированные строки без учета регистра.
    @note Сравнение не чувствительно к регистру.
    @param lstr Указатель на первую строку (должна быть валидной).
    @param rstr Указатель на вторую строку (должна быть валидной).
    @return true если строки идентичны (игнорируя регистр), false если различны или переданы nullptr указатели.
*/
#define string_equali(lstr, rstr) platform_string_equali(lstr, rstr)

/*
    @brief Сравнивает первые N символов двух строк с учетом регистра.
    @note Если строка короче указанной длины, сравнение завершится на первом нуль-терминаторе.
    @param lstr Указатель на первую строку (должна быть валидной).
    @param rstr Указатель на вторую строку (должна быть валидной).
    @param length Количество символов для сравнения, если length = 0, строки считаются равными.
    @return true если указанные части строк идентичны, false если различны или переданы nullptr указатели.
*/
#define string_nequal(lstr, rstr, length) platform_string_nequal(lstr, rstr, length)

/*
    @brief Сравнивает первые N символов двух строк без учета регистра.
    @note Если строка короче указанной длины, сравнение завершится на первом нуль-терминаторе.
    @param lstr Указатель на первую строку (должна быть валидной).
    @param rstr Указатель на вторую строку (должна быть валидной).
    @param length Количество символов для сравнения, если length = 0, строки считаются равными.
    @return true если указанные части строк идентичны (игнорируя регистр), false если различны или переданы nullptr указатели.
*/
#define string_nequali(lstr, rstr, length) platform_string_nequali(lstr, rstr, length)

/*
    @brief Копирует нуль-терминированную строку.
    @note Копируется вся строка включая нуль-терминатор.
    @warning Вызывающая сторона должна обеспечить достаточный размер буфера назначения.
    @param dst Указатель на буфер назначения (должен быть достаточно большим).
    @param src Указатель на строку-источник.
    @return Указатель на буфер назначения (dest).
*/
#define string_copy(dst, src) platform_string_copy(dst, src)

/*
    @brief Копирует не более N символов строки и добавляет нуль терминатор.
    @note Если длина src меньше length, копируется вся строка включая нуль-терминатор.
    @warning Вызывающая сторона должна обеспечить достаточный размер буфера назначения.
    @param dst Указатель на буфер назначения (должен быть достаточно большим).
    @param src Указатель на строку-источник.
    @param length Максимальное количество символов для копирования (включая нуль-терминатор).
    @return Указатель на буфер назначения (dest).
*/
#define string_ncopy(dst, src, length) platform_string_ncopy(dst, src, length)

/*
    @brief Создает копию нуль-терминированной строки в динамической памяти.
    @note Полученную строку необходимо освободить с помощью string_free().
    @param str Указатель на строку для копирования. Не может быть nullptr.
    @return Указатель на новую копию строки в памяти, или nullptr в случае ошибки.
*/
API char* string_duplicate(const char* str);

/*
    @brief Освобождает память, выделенную для строк функциями библиотеки.
    @note Передача nullptr приведет к неопределенному поведению.
    @param str Указатель на строку для освобождения. Не может быть nullptr.
*/
API void string_free(const char* str);
