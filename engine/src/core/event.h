/*
    @file event.h
    @brief Интерфейс системы обработки событий приложения.
    @author Дмитрий Скляр.
    @version 1.0
    @date 14-09-2025

    @license Лицензия Apache, версия 2.0 («Лицензия»);
          Вы не имеете права использовать этот файл без соблюдения условий Лицензии.
          Копию Лицензии можно получить по адресу http://www.apache.org/licenses/LICENSE-2.0
          Если иное не предусмотрено действующим законодательством или не согласовано в письменной форме,
          программное обеспечение, распространяемое по Лицензии, распространяется на условиях «КАК ЕСТЬ»,
          БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых. См. Лицензию для получения
          информации о конкретных языках, регулирующих разрешения и ограничения по Лицензии.

    @note Система предоставляет:
            - Централизованную систему обработки событий
            - Поддержку различных типов событий приложения
            - Механизм подписки и отписки обработчиков событий
            - Передачу контекстных данных вместе с событиями
            - Возможность остановки распространения событий

    @note Для корректной работы необходимо предварительно инициализировать (в указанном порядке):
            - Подсистему консоли platform_console_initialize()
            - Подсистему памяти platform_memory_initialize()
            - Систему памяти memory_system_initialize()
            - Систему событий event_system_initialize()
*/

#pragma once

#include <core/defines.h>

// @brief Код события приложения.
typedef enum event_code {
    /*
        @brief Завершение работы приложения в следующем кадре.
        @note Данные контекста не передаются.
    */
    EVENT_CODE_APPLICATION_QUIT,

    /*
        @brief Событие изменения размера окна приложения.
        @note Получение контекста:
                context.u32[0] - новая ширина
                context.u32[1] - новая высота
    */
    EVENT_CODE_APPLICATION_RESIZE,

    /*
        @brief Событие изменения фокуса окна приложения.
        @note Получение контекста:
                context.u32[0] - 0: потеря фокуса, 1: получение фокуса
    */
    EVENT_CODE_APPLICATION_FOCUS,

    /*
        @brief Событие нажатия/отпускания клавиши клавиатуры.
        @note Получение контекста:
                context.u32[0] - код клавиши (input_type.h)
                context.u32[1] - unicode символ
                context.u32[2] - 0: нажата, 1: отпущена
    */
    EVENT_CODE_KEYBOARD_KEY,

    /*
        @brief Событие нажатия/отпускания кнопки мыши.
        @note Получение контекста:
                context.u32[0] - код кнопки (input_type.h)
                context.u32[1] - 0: нажата, 1: отпущена
    */
    EVENT_CODE_MOUSE_BUTTON,

    /*
        @brief Событие движения мыши.
        @note Получение контекста:
                context.i32[0] - позиция по X
                context.i32[1] - позиция по Y
        TODO: смещение? wayland?
    */
    EVENT_CODE_MOUSE_MOVE,

    /*
        @brief Событие прокрутки колесиков мыши.
        @note Получение контекста:
                context.i32[0] - вертикальное смещение
                context.i32[1] - горизонтальное смещение
    */
    EVENT_CODE_MOUSE_WHEEL,

    /*
        @brief Максимальное количество событий (не является реальным событием).
    */
    EVENT_CODE_COUNT = 8192
} event_code;

// @brief Контекст события (128 bits для эффективной передачи данных).
typedef union event_context {
    // @brief 64-битные беззнаковые целые (2 элемента).
    u64 u64[2];
    // @brief 64-битные знаковые целые (2 элемента).
    i64 i64[2];
    // @brief 64-битные числа с плавающей точкой (2 элемента).
    f64 f64[2];
    // @brief 32-битные беззнаковые целые (4 элемента).
    u32 u32[4];
    // @brief 32-битные знаковые целые (4 элемента).
    i32 i32[4];
    // @brief 32-битные числа с плавающей точкой.
    f32 f32[4];
    // @brief 16-битные беззнаковые целые.
    u16 u16[8];
    // @brief 16-битные знаковые целые (8 элементов).
    i16 i16[8];
    // @brief 8-битные беззнаковые целые (16 элементов).
    u8  u8[16];
    // @brief 8-битные знаковые целые (16 элементов).
    i8  i8[16];
} event_context;

/*
    @brief Тип callback-функции обработчика событий.
    @param code Код события.
    @param sender Указатель на объект-отправитель события (может быть nullptr).
    @param listener Указатель на объект-получатель события (может быть nullptr).
    @param data Контекст события с данными (может быть nullptr).
    @return bool true - остановить распространение события, false - продолжить.
*/
typedef bool (*on_event_callback)(event_code code, void* sender, void* listener, event_context* data);

/*
    @brief Инициализация системы событий.
    @return true если инициализация прошла успешно, иначе false.
*/
bool event_system_initialize();

/*
    @brief Завершение работы системы событий.
*/
void event_system_shutdown();

/*
    @brief Проверяет, была ли инициализирована система событий.
    @return true - система инициализирована и готова к работе, false - система не инициализирована.
*/
API bool event_system_is_initialized();

/*
    @brief Регистрация обработчика события.
    @param code Код события для подписки.
    @param listener Указатель на объект-слушатель (может быть nullptr).
    @param handler Функция-обработчик события.
    @return bool true - успешная регистрация, false - ошибка.
*/
API bool event_register(event_code code, void* listener, on_event_callback handler);

/*
    @brief Отмена регистрации обработчика события.
    @param code Код события для отписки.
    @param listener Указатель на объект-слушатель (может быть nullptr).
    @param handler Функция-обработчик события.
    @return bool true - успешная отписка, false - ошибка.
*/
API bool event_unregister(event_code code, void* listener, on_event_callback handler);

/*
    @brief Отправка события в систему.
    @param code Код отправляемого события.
    @param sender Указатель на объект-отправитель (может быть nullptr).
    @param data Контекст события с данными (может быть nullptr).
    @return bool true - событие обработано, false - ошибка отправки.
*/
API bool event_send(event_code code, void* sender, event_context* data);
