/*
    @file memory.h
    @brief Интерфейс системы менеджмента и контроля памяти с тегированием.
    @author Дмитрий Скляр.
    @version 1.0
    @date 23-08-2025

    @license Лицензия Apache, версия 2.0 («Лицензия»);
          Вы не имеете права использовать этот файл без соблюдения условий Лицензии.
          Копию Лицензии можно получить по адресу http://www.apache.org/licenses/LICENSE-2.0
          Если иное не предусмотрено действующим законодательством или не согласовано в письменной форме,
          программное обеспечение, распространяемое по Лицензии, распространяется на условиях «КАК ЕСТЬ»,
          БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых. См. Лицензию для получения
          информации о конкретных языках, регулирующих разрешения и ограничения по Лицензии.

    @note Система предоставляет:
            - Тегирование памяти для отслеживания распределения по категориям
            - Статистику использования памяти по тегам
            - Обнаружение утечек памяти при завершении работы
            - Безопасные операции с памятью (обнуление, заполнение, копирование)
            - Автоматическое форматирование размеров памяти в читаемые единицы

    @note Для корректной работы необходимо предварительно инициализировать (в указанном порядке):
            - Подсистему консоли platform_console_initialize()
            - Подсистему памяти platform_memory_initialize()
            - Систему памяти memory_system_initialize()
*/

#pragma once

#include <core/defines.h>
#include <platform/memory.h>

// @brief Доступные теги для обозначения участка памяти (используется при профилировании и отладке).
typedef enum memory_tag {
    // @brief Неизвестный или неопределенный тип памяти.
    MEMORY_TAG_UNKNOWN,
    // @brief Память используемая динамическими массивами.
    MEMORY_TAG_DARRAY,
    // @brief Память используемая для хранения строк.
    MEMORY_TAG_STRING,
    // @brief Память используемая приложением.
    MEMORY_TAG_APPLICATION,
    // @brief Память используемая системами движка.
    MEMORY_TAG_SYSTEM,
    // @brief Память используемая рендерером.
    MEMORY_TAG_RENDERER,
    // @brief Количество тегов памяти (не является реальным тегом).
    MEMORY_TAG_COUNT
} memory_tag;

// @brief Структура для форматированного представления размера памяти.
typedef struct memory_format {
    // @brief Название единицы измерения (например, "B", "KiB", "MiB", "GiB"), не требует освобождения.
    const char* unit;
    // @brief Количество единиц измерения, представляющие количество байт.
    f32 amount;
} memory_format;

/*
    @brief Инициализирует систему менеджмента и контроля памяти.
    @note Должна быть вызвана один раз при старте приложения.
    @return true - инициализация завершилась успешно, false - произошла ошибка.
*/
bool memory_system_initialize();

/*
    @brief Останавливает систему менеджмента и контроля памяти.
    @note Если по окончании работы осталась неосвобожденная память, система
          уведомит об этом в логах с указанием тегов и объемов утечек.
*/
void memory_system_shutdown();

/*
    @brief Проверяет, была ли инициализирована система систему менеджмента и контроля памяти.
    @warning Не thread-safe. Должна вызываться из того же потока, что и инициализация/завершение.
    @return true - система инициализирована и готова к работе, false - система не инициализирована.
*/
API bool memory_system_is_initialized();

/*
    @brief Возвращает строку с информацией об использовании памяти по тегам.
    @note После использования освободить с использованием string_free.
    @return Строка с отформатированной статистикой использования памяти.
*/
API const char* memory_system_usage_str();

/*
    @brief Выделяет блок памяти с указанием размера, выравнивания и тегом.
    @param size Размер выделяемой памяти в байтах.
    @param alignment Требуемое выравнивание (степень двойки).
    @param tag Тег памяти для отслеживания.
    @return Указатель на выделенную память или nullptr при ошибке.
*/
API void* memory_allocate(u64 size, u16 alignment, memory_tag tag);

/*
    @brief Освобождает ранее выделенный блок памяти.
    @note Использование указателя после освобождения приведет к непредсказуемому поведению!
    @param block Указатель на блок памяти для освобождения.
    @param size Размер освобождаемой памяти в байтах.
    @param tag Тег памяти (должен соответствовать тегу выделения).
*/
API void memory_free(void* block, u64 size, memory_tag tag);

/*
    @brief Форматирует размер памяти в наиболее подходящие единицы измерения.
    @note Функция автоматически выбирает наиболее читаемые единицы из:
          байты ("B"), кибибайты ("KiB"), мебибайты ("MiB"), гибибайты ("GiB").
    @param size Размер памяти в байтах для форматирования.
    @param out_format Указатель на структуру memory_format, куда будет записан результат.
*/
API void memory_get_format(u64 size, memory_format* out_format);

/*
    @brief Макрос выделения памяти без выравнивания (выравнивание = 1).
    @param size Размер выделяемой памяти в байтах.
    @param tag Тег категории памяти.
    @return Указатель на выделенную память или nullptr при ошибке.
*/
#define mallocate(size, tag) memory_allocate(size, 1, tag)

/*
    @brief Макрос освобождения памяти.
    @param block Указатель на блок памяти для освобождения.
    @param size Размер освобождаемой памяти в байтах.
    @param tag Тег памяти (должен соответствовать тегу выделения).
*/
#define mfree(block, size, tag) memory_free((void*)block, size, tag)

/*
    @brief Макрос обнуления блока памяти.
    @param block Указатель на блок памяти.
    @param size Размер блока в байтах.
*/
#define mzero(block, size) platform_memory_zero(block, size)

/*
    @brief Макрос заполнения блока памяти указанным значением.
    @param block Указатель на блок памяти.
    @param size Размер блока в байтах.
    @param value Значение для заполнения (диапазон 0-255).
*/
#define mset(block, size, value) platform_memory_set(block, size, value)

/*
    @brief Макрос копирования данных между блоками памяти.
    @note Поведение не определено при перекрытии регионов памяти.
    @param dst Указатель на блок памяти куда копировать.
    @param src Указатель на блок памяти откуда копировать.
    @param size Размер копируемых данных в байтах.
*/
#define mcopy(dst, src, size) platform_memory_copy(dst, src, size)

/*
    @brief Макрос копирования данных между блоками памяти.
    @note Безопасно обрабатывает перекрывающиеся регионы памяти.
    @param dst Указатель на блок памяти куда копировать.
    @param src Указатель на блок памяти откуда копировать.
    @param size Размер копируемых данных в байтах.
*/
#define mmove(dst, src, size) platform_memory_move(dst, src, size)
