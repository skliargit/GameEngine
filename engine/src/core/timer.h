/*
    @file timer.h
    @brief Интерфейс системы измерения временных интервалов.
    @author Дмитрий Скляр.
    @version 1.0
    @date 23-08-2025

    @license Лицензия Apache, версия 2.0 («Лицензия»);
          Вы не имеете права использовать этот файл без соблюдения условий Лицензии.
          Копию Лицензии можно получить по адресу http://www.apache.org/licenses/LICENSE-2.0
          Если иное не предусмотрено действующим законодательством или не согласовано в письменной форме,
          программное обеспечение, распространяемое по Лицензии, распространяется на условиях «КАК ЕСТЬ»,
          БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ ИЛИ УСЛОВИЙ, явных или подразумеваемых. См. Лицензию для получения
          информации о конкретных языках, регулирующих разрешения и ограничения по Лицензии.

    @note Система предоставляет:
            - Измерение временных интервалов с высокой точностью
            - Запуск, остановку и перезапуск таймеров
            - Получение прошедшего времени без остановки таймера
            - Автоматическое форматирование времени в читаемые единицы (нс, мкс, мс, с)
            - Проверку состояния таймера (запущен/остановлен)

    @note Для корректной работы необходимо предварительно инициализировать (в указанном порядке):
            - Подсистему консоли platform_console_initialize()
            - Подсистему таймера platform_systimer_initialize()
*/

#pragma once

#include <core/defines.h>

// @brief Структура для измерения временных интервалов.
typedef struct timer {
    // @brief Временная метка начала измерения в секундах.
    f64 start;
    // @brief Временная метка окончания измерения в секундах.
    f64 end;
} timer;

// @brief Структура для форматирования времени в читаемые единицы.
typedef struct timer_format {
    // @brief Название единицы измерения (например, "ns", "us", "ms", "s").
    const char* unit;
    // @brief Количество единиц измерения, представляющее временной интервал.
    f32 amount;
} timer_format;

/*
    @brief Инициализирует таймер нулевыми значениями.
    @note Эта функция не начинает отсчет времени.
    @param t Указатель на структуру timer для инициализации.
*/
API void timer_init(timer* t);

/*
    @brief Запускает/перезапускает отсчет времени таймера.
    @param t Указатель на структуру timer для запуска.
*/
API void timer_start(timer* t);

/*
    @brief Запускает/перезапускает отсчет времени таймера.
    @param t Указатель на структуру timer для запуска.
*/
#define timer_restart(t) timer_start(t)

/*
    @brief Останавливает таймер и фиксирует конечное время.
    @note После остановки можно получить продолжительность интервала через timer_duration().
    @param t Указатель на структуру timer для остановки.
*/
API void timer_stop(timer* t);

/*
    @brief Возвращает прошедшее время с момента запуска таймера без его остановки.
    @param t Указатель на структуру timer.
    @return Прошедшее время в секундах если таймер запущен, 0 если был остановлен или не был запущен.
*/
API f64 timer_elapsed(const timer* t);

/*
    @brief Возвращает продолжительность завершенного временного интервала.
    @param t Указатель на структуру timer.
    @return Продолжительность интервала в секундах если таймер был остановлен, 0 еще запущен или не был запущен.
*/
API f64 timer_duration(const timer* t);

/*
    @brief Проверяет, запущен ли в данный момент таймер.
    @param t Указатель на структуру timer.
    @return true если таймер запущен, false в противном случае.
*/
API bool timer_is_running(const timer* t);

/*
    @brief Форматирует временной интервал в наиболее подходящие единицы измерения.
    @note Функция автоматически выбирает наиболее читаемые единицы из:
          наносекунды ("ns"), микросекунды ("us"), миллисекунды ("ms"), секунды ("s").
    @param time_sec Временной интервал в секундах для форматирования.
    @param out_format Указатель на структуру timer_format, куда будет записан результат.
*/
API void timer_get_format(f64 time_sec, timer_format* out_format);
